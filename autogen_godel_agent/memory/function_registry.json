{
  "metadata": {
    "validate_email": {
      "code": "\ndef validate_email(email: str) -> bool:\n    \"\"\"\n    Validate email address format.\n    \n    Args:\n        email: Email address to validate\n        \n    Returns:\n        True if email format is valid, False otherwise\n    \"\"\"\n    import re\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(pattern, email))\n",
      "description": "Validates email address format using regex",
      "task_origin": "Test email validation task",
      "created_at": "2025-07-03T16:38:07.478366",
      "test_cases": [
        {
          "input": {
            "email": "test@example.com"
          },
          "expected_type": "bool",
          "expected_value": true,
          "description": "Valid email test"
        },
        {
          "input": {
            "email": "invalid-email"
          },
          "expected_type": "bool",
          "expected_value": false,
          "description": "Invalid email test"
        }
      ],
      "signature": "(email: str) -> bool",
      "docstring": "Validate email address format.\n\nArgs:\n    email: Email address to validate\n    \nReturns:\n    True if email format is valid, False otherwise"
    },
    "calculate_bmi": {
      "code": "\ndef calculate_bmi(weight: float, height: float) -> float:\n    \"\"\"\n    Calculate Body Mass Index (BMI).\n    \n    Args:\n        weight: Weight in kilograms\n        height: Height in meters\n        \n    Returns:\n        BMI value\n    \"\"\"\n    if height <= 0 or weight <= 0:\n        raise ValueError(\"Weight and height must be positive\")\n    \n    return round(weight / (height ** 2), 2)\n",
      "description": "Calculate Body Mass Index from weight and height",
      "task_origin": "Integration test",
      "created_at": "2025-07-03T16:38:07.484920",
      "test_cases": [
        {
          "input": {
            "weight": 70.0,
            "height": 1.75
          },
          "expected_type": "float",
          "description": "Normal BMI calculation"
        },
        {
          "input": {
            "weight": 80.0,
            "height": 1.8
          },
          "expected_type": "float",
          "description": "Another BMI calculation"
        }
      ],
      "signature": "(weight: float, height: float) -> float",
      "docstring": "Calculate Body Mass Index (BMI).\n\nArgs:\n    weight: Weight in kilograms\n    height: Height in meters\n    \nReturns:\n    BMI value"
    },
    "validate_url": {
      "code": "\ndef validate_url(url: str) -> bool:\n    \"\"\"\n    Validate URL format.\n    \n    Args:\n        url: URL string to validate\n        \n    Returns:\n        True if URL format is valid, False otherwise\n    \"\"\"\n    import re\n    \n    # Basic URL pattern\n    pattern = r'^https?://[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}(/.*)?$'\n    return bool(re.match(pattern, url))\n",
      "description": "Validates URL format using regex pattern",
      "task_origin": "Demo: URL validation task",
      "created_at": "2025-07-03T16:40:06.103701",
      "test_cases": [
        {
          "input": {
            "url": "https://www.example.com"
          },
          "expected_type": "bool",
          "expected_value": true,
          "description": "Valid HTTPS URL"
        },
        {
          "input": {
            "url": "http://test.org/path"
          },
          "expected_type": "bool",
          "expected_value": true,
          "description": "Valid HTTP URL with path"
        },
        {
          "input": {
            "url": "not-a-url"
          },
          "expected_type": "bool",
          "expected_value": false,
          "description": "Invalid URL"
        }
      ],
      "signature": "(url: str) -> bool",
      "docstring": "Validate URL format.\n\nArgs:\n    url: URL string to validate\n    \nReturns:\n    True if URL format is valid, False otherwise"
    },
    "validate_phone_number": {
      "code": "import re\n\ndef validate_phone_number(phone_number: str) -> bool:\n    \"\"\"\n    Validate if a phone number is in international format.\n    \n    The function checks if the phone number:\n    - Starts with a '+' followed by country code\n    - Contains only digits (except the leading '+')\n    - Has a total length between 8 and 15 digits (excluding '+')\n    \n    Args:\n        phone_number: The phone number string to validate\n        \n    Returns:\n        bool: True if the phone number is valid, False otherwise\n        \n    Examples:\n        >>> validate_phone_number(\"+123456789\")\n        True\n        >>> validate_phone_number(\"123456789\")\n        False\n        >>> validate_phone_number(\"+12 345 6789\")\n        False\n    \"\"\"\n    if not isinstance(phone_number, str):\n        return False\n        \n    # Regular expression pattern for international phone numbers\n    pattern = r'^\\+\\d{8,15}$'\n    \n    # Check if the phone number matches the pattern\n    if re.fullmatch(pattern, phone_number):\n        return True\n    return False",
      "description": "Validate phone numbers in international format",
      "task_origin": "Auto-generated for: Validate phone numbers in international format",
      "created_at": "2025-07-03T17:15:21.829179",
      "test_cases": [
        {
          "input": {
            "phone_number": "+1234567890"
          },
          "expected_type": "bool",
          "expected_value": true,
          "description": "Test with valid international phone number"
        },
        {
          "input": {
            "phone_number": "1234567890"
          },
          "expected_type": "bool",
          "expected_value": false,
          "description": "Test with invalid phone number (no +)"
        }
      ],
      "signature": "(phone_number: str) -> bool",
      "docstring": "Validate if a phone number is in international format.\n\nThe function checks if the phone number:\n- Starts with a '+' followed by country code\n- Contains only digits (except the leading '+')\n- Has a total length between 8 and 15 digits (excluding '+')\n\nArgs:\n    phone_number: The phone number string to validate\n    \nReturns:\n    bool: True if the phone number is valid, False otherwise\n    \nExamples:\n    >>> validate_phone_number(\"+123456789\")\n    True\n    >>> validate_phone_number(\"123456789\")\n    False\n    >>> validate_phone_number(\"+12 345 6789\")\n    False"
    },
    "validate_international_phone_number": {
      "code": "import re\n\ndef validate_international_phone_number(phone_number: str) -> bool:\n    \"\"\"\n    Validates if a phone number is in international format.\n\n    The function checks if the phone number:\n    - Starts with a '+' followed by the country code\n    - Contains only digits (except the leading '+')\n    - Has a total length between 8 and 15 digits (excluding the '+')\n    - Doesn't contain any spaces, hyphens, or other special characters\n\n    Args:\n        phone_number: The phone number string to validate\n\n    Returns:\n        bool: True if the phone number is valid, False otherwise\n\n    Examples:\n        >>> validate_international_phone_number(\"+1234567890\")\n        True\n        >>> validate_international_phone_number(\"1234567890\")\n        False\n        >>> validate_international_phone_number(\"+12 345 67890\")\n        False\n    \"\"\"\n    # Regular expression pattern for international phone numbers\n    pattern = r'^\\+\\d{8,15}$'\n    \n    # Check if the phone number matches the pattern\n    if not re.fullmatch(pattern, phone_number):\n        return False\n    \n    # Additional validation checks\n    if len(phone_number) < 9 or len(phone_number) > 16:  # + plus 8-15 digits\n        return False\n    \n    return True",
      "description": "Create a function to validate phone numbers in international format",
      "task_origin": "Auto-generated for: Create a function to validate phone numbers in international format",
      "created_at": "2025-07-03T17:17:38.517959",
      "test_cases": [
        {
          "input": {
            "phone_number": "+1234567890"
          },
          "expected_type": "bool",
          "expected_value": true,
          "description": "Test with valid international phone number"
        },
        {
          "input": {
            "phone_number": "1234567890"
          },
          "expected_type": "bool",
          "expected_value": false,
          "description": "Test with invalid phone number (no +)"
        }
      ],
      "signature": "(phone_number: str) -> bool",
      "docstring": "Validates if a phone number is in international format.\n\nThe function checks if the phone number:\n- Starts with a '+' followed by the country code\n- Contains only digits (except the leading '+')\n- Has a total length between 8 and 15 digits (excluding the '+')\n- Doesn't contain any spaces, hyphens, or other special characters\n\nArgs:\n    phone_number: The phone number string to validate\n\nReturns:\n    bool: True if the phone number is valid, False otherwise\n\nExamples:\n    >>> validate_international_phone_number(\"+1234567890\")\n    True\n    >>> validate_international_phone_number(\"1234567890\")\n    False\n    >>> validate_international_phone_number(\"+12 345 67890\")\n    False"
    }
  },
  "last_updated": "2025-07-03T17:17:38.520001"
}