"""
Function: test_complex_function
Generated by E5Agent Function Registry
Storage Type: complex
Created: 2025-07-15T13:59:01.959855
"""


import json
import hashlib
import datetime
from typing import Dict, List, Any, Optional

def test_complex_function(data: Dict[str, Any]) -> Dict[str, Any]:
    """
    复杂的数据处理函数，用于测试文件存储
    
    这个函数包含多个导入、复杂的逻辑和大量的代码行数
    用于测试混合存储系统是否能正确识别复杂函数并存储为文件
    """
    try:
        # 数据验证
        if not isinstance(data, dict):
            return {"error": "输入必须是字典类型"}
        
        # 生成哈希
        data_str = json.dumps(data, sort_keys=True)
        data_hash = hashlib.md5(data_str.encode()).hexdigest()
        
        # 处理数据
        processed_data = {}
        for key, value in data.items():
            if isinstance(value, str):
                processed_data[f"str_{key}"] = value.upper()
            elif isinstance(value, (int, float)):
                processed_data[f"num_{key}"] = value * 2
            elif isinstance(value, list):
                processed_data[f"list_{key}"] = len(value)
            else:
                processed_data[f"other_{key}"] = str(type(value))
        
        # 生成统计信息
        stats = {
            "total_keys": len(data),
            "processed_keys": len(processed_data),
            "data_hash": data_hash,
            "timestamp": datetime.datetime.now().isoformat(),
            "processing_summary": {
                "strings": len([k for k in processed_data if k.startswith("str_")]),
                "numbers": len([k for k in processed_data if k.startswith("num_")]),
                "lists": len([k for k in processed_data if k.startswith("list_")]),
                "others": len([k for k in processed_data if k.startswith("other_")])
            }
        }
        
        # 返回结果
        return {
            "success": True,
            "original_data": data,
            "processed_data": processed_data,
            "statistics": stats,
            "metadata": {
                "function_name": "test_complex_function",
                "version": "1.0",
                "complexity": "high"
            }
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "timestamp": datetime.datetime.now().isoformat()
        }
